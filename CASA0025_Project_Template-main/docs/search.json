[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://{your_username}.github.io/{your_repo_name}"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CROPINVEST - Crop Yield Estimator for the State of North Dakota, USA",
    "section": "Project Summary",
    "text": "Project Summary\nCROPINVEST - Crop Yield Estimator for the State of North Dakota, USA"
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "CROPINVEST - Crop Yield Estimator for the State of North Dakota, USA",
    "section": "Problem Statement",
    "text": "Problem Statement\nWhat is the problem you’re trying to address using this application?"
  },
  {
    "objectID": "index.html#end-user",
    "href": "index.html#end-user",
    "title": "CROPINVEST - Crop Yield Estimator for the State of North Dakota, USA",
    "section": "End User",
    "text": "End User\nWho are you building this application for? How does it address a need this community has?"
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "CROPINVEST - Crop Yield Estimator for the State of North Dakota, USA",
    "section": "Data",
    "text": "Data\nDatasets that we have used & the relevant data from the dataset which we have used are described below in detail:-\n\nUnited States Census Bureau TIGER Dataset It contains the boundary information i.e. counties of states which are the primary legal divisions units of US states.\n\nDataset: ee.ImageCollection(“TIGER/2016/Counties”)\nDataset Provider: United States Census Bureau\nData Used for our Study: STATEFP parameter of the dataset which provides the State FIPS code & the North Dakota value is used. \n\n\nUSDA NASS Cropland Data Layers It is a crop-specific land cover data layer created annually for the continental United States using moderate resolution satellite imagery and extensive agricultural ground truth.\n\nDataset: ee.FeatureCollection(“USDA/NASS/CDL”)\nDataset Provider: USDA National Agricultural Statistics Service\nData Used for our Study: cropland values for different crops of our study are used Wheat, Corn & Soybean Values provided from the Cropland Table. \n\n\nMOD13Q1.061 Terra Vegetation Indices 16-Day Global It provides Normalized Difference Vegetation Index (NDVI) value on a per pixel basis.\n\nDataset: ee.ImageCollection(“MODIS/061/MOD13Q1”)\nDataset Provider: NASA LP DAAC at the USGS EROS Center\nData Used for our Study: NDVI parameter of the dataset which provides the Normalized Difference Vegetation Index. \n\n\nGRIDMET:Gridded Surface Meteorological Dataset It provides the high spatial resolution (~4-km) daily surface fields of temperature, precipitation, winds, humidity and radiation across the contiguous United States from 1979.\n\nDataset: ee.ImageCollection(“IDAHO_EPSCOR/GRIDMET”)\nDataset Provider: USDA National Agricultural Statistics Service\nData Used for our Study: pr parameter of the dataset which provides the ‘Precipitation amount’ in mm (daily total) \n\n\nSentinel-1 SAR GRD It contains the boundary information i.e. counties of states which are the primary legal divisions units of US states.\n\nDataset: ee.ImageCollection(“COPERNICUS/S1_GRD”)\nDataset Provider: European Union/ESA/Copernicus\nData Used for our Study: VV parameter of the dataset which provides ‘Single co-polarization, vertical transmit/vertical receive’ in dB. \n\nSPL3SMP_E.005 SMAP L3 Radiometer Global Daily 9km Soil Moisture It provides a daily composite of global land surface conditions retrieved by the Soil Moisture Active Passive (SMAP) L-Band radiometer. The daily data here were collected from the descending (local solar time of 6 am) and ascending (local solar time of 6 pm) passes.\n\nDataset: ee.ImageCollection(“NASA/SMAP/SPL3SMP_E/005”)\nDataset Provider: Google and NSIDC\nData Used for our Study: soil_moisture_am & soil_moisture_pmparameter of the dataset which provides ’Retrieved soil moisture estimate from the disaggregated/downscaled vertical polarization brightness temperature at 9-km grid cell one at AM overpass & other at PM overpass.in dB. \n\nMOD11A1.061 Terra Land Surface Temperature MOD11A1 V6.1 product provides daily land surface temperature (LST) along with other parameters.\n\nDataset: ee.ImageCollection(“NASA/SMAP/SPL3SMP_E/005”)\nDataset Provider: NASA LP DAAC at the USGS EROS Center\nData Used for our Study: LST_Day_1km & LST_Night_1kmparameter of the dataset which provides ‘Daytime Land Surface Temperature’ & Daytime Land Surface Temperature’ both in Kelvin (K). \n\nMCD18C2.061 Photosynthetically Active Radiation Daily 3 hour The MCD18C2 Version 6.1 is a Moderate Resolution Imaging Spectroradiometer (MODIS) Terra and Aqua combined Photosynthetically Active Radiation (PAR) gridded Level 3 product produced daily at 0.05 degree (5,600 meters at the equator) resolution with estimates of PAR every 3 hours.\n\nDataset: ee.ImageCollection(“MODIS/061/MCD18C2”)\nDataset Provider: NASA LP DAAC at the USGS EROS Center\nData Used for our Study: GMT_1200_PAR parameter of the dataset which provides ‘Total PAR at GMT 12:00’.PAR is incident solar radiation in the visible spectrum (400-700 nanometers) and is an important variable in land-surface models having use in agriculture & other scientific applications. \n\nMOD16A2GF.061: Terra Net Evapotranspiration It includes inputs of daily meteorological reanalysis data along with MODIS remotely sensed data products such as vegetation property dynamics, albedo, and land cover. The pixel values for the two Evapotranspiration layers (ET and PET) are the sum of all eight days within the composite period, and the pixel values for the two Latent Heat layers (LE and PLE) are the average of all eight days within the composite peri.\n\nDataset: ee.ImageCollection(“MODIS/061/MOD16A2GF”)\nDataset Provider: NASA LP DAAC at the USGS EROS Center\nData Used for our Study: ET parameter of the dataset which provides ‘Total evapotranspiration’ in kg/m^2/8day.s."
  },
  {
    "objectID": "index.html#methodology",
    "href": "index.html#methodology",
    "title": "CROPINVEST - Crop Yield Estimator for the State of North Dakota, USA",
    "section": "Methodology",
    "text": "Methodology\nPrevious studies showed that RF is an effective and universal machine learning method for crop yield prediction on a regional and global scale with high accuracy and precision and ease of use (Jeong et al., 2016.; Prasad et al., 2021).\n\nBuilding Random Forest Model:\n\nPrepare original CSV including the three types of crop among several X variables and Y variable (the crop yield)\nPrepare training/validation data\nUse the training data to train three different RF Models in GEE\n\n\n\nValidation\nTo get the performance of our models, we can use the test data from the previous split. We used R square and Root Mean Squared Error (RMSE) to validate our models. There are some graphs showing these metrics:\n:::{.column-page}\n\n  &lt;a::: d Wi\n\n**Inte\nface**nterface\nHere is a presentation to show, how our app :::{.column-page} l\n\n \na::: d Wani/iframe&gt;"
  },
  {
    "objectID": "index.html#the-application",
    "href": "index.html#the-application",
    "title": "CROPINVEST - Crop Yield Estimator for the State of North Dakota, USA",
    "section": "The Application",
    "text": "The Application"
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CROPINVEST - Crop Yield Estimator for the State of North Dakota, USA",
    "section": "How it Works",
    "text": "How it Works\n\nData Extraction Code:\n\nHere we use the Python environment to extract the data from different datasets using Google Earth Engine API\nAfterwards, we first use the crop-specific land cover data to distinguish different crops- wheat, soybean or corn for each county in North Dakota.\nFurther, NDVI, Precipitation, SAR, Soil Moisture & other values are used to get the county-wise values from the year 2000-2024.\nAfterwards, the Yield data is obtained from the United States Department of Agriculture for each of the years and a final dataset is obtained which has all the X Variables (GEOID,NDVI,PA,SAR,SMS_AM,LST_DAY,SMS_PM,LST_NIGHT,PAR,ET) & Y variable (YIELD).\n\n\npip install earthengine-api\nimport ee\ndef processYear(year):\n    # Load the CDL dataset for the given year\n    dataset = ee.ImageCollection('USDA/NASS/CDL')\\\n                .filter(ee.Filter.date(f'{year}-01-01', f'{year}-12-31'))\\\n                .first()\n    crop_landcover = dataset.select('cropland')\n\n    # Filter for North Dakota counties\n    #`STATEFP` parameter of the dataset which provides the State FIPS code & the North Dakota value is used.\n    counties = ee.FeatureCollection('TIGER/2016/Counties')\n    nd = counties.filter(ee.Filter.eq('STATEFP', '38'))\n    \n    # Identify corn areas in North Dakota\n    #`cropland` values for different crops of our study are used Wheat, Corn & Soybean Values provided from the Cropland Table.\n    corn = crop_landcover.eq(1).Or(crop_landcover.eq(12)).Or(crop_landcover.eq(13))\n    masked_corn = crop_landcover.updateMask(corn).clipToCollection(nd)\n\n    # Calculate NDVI for corn areas using MODIS data\n    #`NDVI` parameter of the dataset and we obtain the mean over the growth period of the crop\n    NDVI_dataset = ee.ImageCollection('MODIS/061/MOD13Q1')\\\n                    .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n    ndvi = NDVI_dataset.select('NDVI')\n    mean_ndvi = ndvi.mean().rename('NDVI')\n    cornNDVI = mean_ndvi.updateMask(masked_corn)\n    \n    # Calculate precipitation using GRIDMET data\n    #`pr` parameter of the dataset which provides the 'Precipitation amount' in mm (daily total)\n    precipitation_dataset = ee.ImageCollection(\"IDAHO_EPSCOR/GRIDMET\")\\\n                             .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                             .select('pr')\n    mean_precipitation = precipitation_dataset.mean().rename('PA')\n\n    # Load Sentinel-1 C-band SAR Image Collection for the given year, select VV polarization\n    #`VV` parameter of the dataset which provides 'Single co-polarization, vertical transmit/vertical receive' in dB.\n    s1_dataset = ee.ImageCollection(\"COPERNICUS/S1_GRD\")\\\n                   .filter(ee.Filter.eq('instrumentMode', 'IW'))\\\n                   .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\\\n                   .filter(ee.Filter.date(f'{year}-01-01', f'{year}-12-31'))\\\n                   .select('VV')\n    mean_s1_vv = s1_dataset.mean().rename('SAR')\n\n    # Load Radiometer Global Daily 9 km Soil Moisture AM\n    #`soil_moisture_am` & `soil_moisture_pm` parameter of the dataset which provides 'Retrieved soil moisture estimate from the\n    # disaggregated/downscaled vertical polarization brightness temperature at 9-km grid cell one at AM overpass & other at  PM overpass. in dB.\n    smap_dataset = ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\\\n                    .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                    .select('soil_moisture_am')\n    mean_soil_moisture = smap_dataset.mean().rename('SMS_AM')\n    # Load Radiometer Global Daily 9 km Soil Moisture PM\n\n    smapDataset_pm = ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\\\n                       .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                       .select('soil_moisture_am') \n    meanSoilMoisture_pm = smapDataset_pm.mean().rename('SMS_PM')\n    \n    # Load MODIS Land Surface Temperature DAY\n    #`LST_Day_1km` & `LST_Night_1km` parameter of the dataset which provides 'Daytime Land Surface Temperature' &\n    # Nighttime Land Surface Temperature' both in Kelvin (K).\n    lstDataset = ee.ImageCollection(\"MODIS/061/MOD11A1\")\\\n                   .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n \n    lstmean_celsius = lstDataset.select('LST_Day_1km')\\\n                                .mean()\\\n                                .multiply(0.02)\\\n                                .subtract(273.15)\\\n                                .rename('LST_DAY')\n    # Load MODIS Land Surface Temperature NIGHT\n    lstDataset_night = ee.ImageCollection(\"MODIS/061/MOD11A1\")\\\n                         .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n \n    lstmean_celsius_night = lstDataset_night.select('LST_Night_1km')\\\n                                              .mean()\\\n                                              .multiply(0.02)\\\n                                              .subtract(273.15)\\\n                                              .rename('LST_NIGHT')\n                         \n    # Photosynthetically Active Radiation Daily 3-Hour \n    #`GMT_1200_PAR` parameter of the dataset which provides 'Total PAR at GMT 12:00'. PAR is incident solar radiation in\n    # the visible spectrum (400-700 nanometers) and is an important variable in land-surface models having use in agriculture &\n    # other scientific applications.\n    par_12 = ee.ImageCollection(\"MODIS/061/MCD18C2\")\\\n               .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n               .select('GMT_1200_PAR')\n                        \n    mean_par_12 = par_12.mean().rename('PAR'); # Calculate the Photosynthetically Active Radiation at 12\n\n                         \n    # Net Evapotranspiration\n    # `ET` parameter of the dataset which provides 'Total evapotranspiration' in kg/m^2/8day.s.\n    netevapo = ee.ImageCollection(\"MODIS/061/MOD16A2GF\")\\\n                 .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                 .select('ET')\n                    \n    mean_netevapo = netevapo.mean().rename('ET')  # Calculate the mean Soil Moisture\n\n\n    # Combine all layers\n    combinedDataset = cornNDVI.addBands(mean_precipitation).addBands(mean_s1_vv).addBands(mean_soil_moisture).addBands(lstmean_celsius).addBands(meanSoilMoisture_pm).addBands(lstmean_celsius_night).addBands(mean_par_12).addBands(mean_netevapo)\n\n    # Reduce regions and calculate mean values over the specified areas\n    combined_mean = combinedDataset.reduceRegions(\n        collection=nd,\n        reducer=ee.Reducer.mean(),\n        scale=30,\n        tileScale=4,\n    )\n\n    # Define export parameters\n    export_params = {\n        'collection': combined_mean,\n        'description': f'combined_{year}',\n        'folder': 'GEE_Folder',\n        'fileNamePrefix': f'Combined_{year}',\n        'fileFormat': 'CSV',\n        'selectors': ['NAME', 'GEOID', 'NDVI', 'PA', 'SAR', 'SMS_AM', 'LST_DAY', 'SMS_PM', 'LST_NIGHT', 'PAR', 'ET']\n    }\n\n    # Commented the line below as I have got the data in my drive already\n    #ee.batch.Export.table.toDrive(**export_params).start()\n\n# Example of processing each year\nfor year in range(2000, 2024):\n    processYear(year)\n\n\nMethodology Code\n```js\n// ——————————————————————————define crop layers————————————————————————————————\nvar cropLayers = { Corn: { // Add layers of corn ‘2018’: ee.Image(“projects/ee-songzimeng/assets/corn2018”), ‘2019’: ee.Image(“projects/ee-songzimeng/assets/corn2019”), ‘2020’: ee.Image(“projects/ee-songzimeng/assets/corn2020”), ‘2021’: ee.Image(“projects/ee-songzimeng/assets/corn2021”), ‘2022’: ee.Image(“projects/ee-songzimeng/assets/corn2022”), ‘2023’: ee.Image(“projects/ee-songzimeng/assets/corn2023”), ‘2024’: ee.Image(“projects/ee-songzimeng/assets/corn2024”)\n},\nSoybean: { // Add layers of soybean\n'2018': ee.Image(\"projects/ee-songzimeng/assets/soybean2018\"),\n'2019': ee.Image(\"projects/ee-songzimeng/assets/soybean2019\"),\n'2020': ee.Image(\"projects/ee-songzimeng/assets/soybean2020\"),\n'2021': ee.Image(\"projects/ee-songzimeng/assets/soybean2021\"),\n'2022': ee.Image(\"projects/ee-songzimeng/assets/soybean2022\"),\n'2023': ee.Image(\"projects/ee-songzimeng/assets/soybean2023\"),\n'2024': ee.Image(\"projects/ee-songzimeng/assets/soybean2024\")\n},\nWheat: { // Add layers of wheat\n'2018': ee.Image(\"projects/ee-songzimeng/assets/wheat2018\"),\n'2019': ee.Image(\"projects/ee-songzimeng/assets/wheat2019\"),\n'2020': ee.Image(\"projects/ee-songzimeng/assets/wheat2020\"),\n'2021': ee.Image(\"projects/ee-songzimeng/assets/wheat2021\"),\n'2022': ee.Image(\"projects/ee-songzimeng/assets/wheat2022\"),\n'2023': ee.Image(\"projects/ee-songzimeng/assets/wheat2023\"),\n'2024': ee.Image(\"projects/ee-songzimeng/assets/wheat2024\")\n} };\n// ————————– Data —————————— Map.setCenter(-100.55, 47.5, 7); Map.setOptions(‘SATELLITE’);\n// clip the north dakota var counties = ee.FeatureCollection(‘TIGER/2016/Counties’); var nd = counties.filter(ee.Filter.eq(‘STATEFP’, ‘38’));\n// Formatted county name function var nd = nd.map(function(feature) { var name = ee.String(feature.get(‘NAME’)).toUpperCase().replace(’ ‘,’‘, ’g’); return feature.set(‘NAME’, name); });\n// Show the county boundary var ndCounties = ee.Image().byte().paint({ featureCollection: nd, color: null, width: 1 });\n// Add the counties layer Map.addLayer(ndCounties, {}, ‘ND Counties’);\n/// ——————————————Function and global variables—————————————————————————— // Function to read csv function readCsvFile(selectedYear, selectedCrop) { var fileName = selectedYear +’_‘+ selectedCrop; var csvFile = ee.FeatureCollection(’projects/ee-songzimeng/assets/’ + fileName);\nreturn csvFile; }\n// Function to fomat county name function processCountyColumn(table) { var countyColumnName = ‘County’; function processCountyName(countyName) { return ee.String(countyName).toUpperCase().replace(‘\\s+’, ’’); }\nvar processedCountyColumn = table.map(function(feature) { var countyName = feature.get(countyColumnName); var processedCountyName = processCountyName(countyName); return feature.set(countyColumnName, processedCountyName); });\n// return FeatureCollection return processedCountyColumn; }\nvar selectedCrop=‘Select…’; var selectedYear=‘Select…’; var soybeanPrice = 11.90; // 2024 average var CornPrice = 41.68; // 2024 average var wheatPrice = 6.07; // 2024 average var cropPrice = 0; //\nvar crops = { ‘Corn’: 1, ‘Wheat’: 23, ‘Soybean’: 5 };\n// ————————————————interface—————————————————————————— // set default year var defaultYear = ‘2018’;\nvar cropYieldLayer = null;\nvar statsLabel_1 = ui.Label(‘Click on County to see info:’); var statsLabel_2 = ui.Label(‘Select an area to see info:’);\n// set original info status statsLabel_1.style().set(‘shown’, true); statsLabel_2.style().set(‘shown’, false);\n// Clear button to remove all selected layers var drawingTools = Map.drawingTools(); var clearButton = ui.Button({ label: ‘Clear Selected Area’, onClick: function() {\nvar layers = drawingTools.layers();\n\nlayers.forEach(function(layer) {\n  drawingTools.layers().remove(layer);\n});\n\nresultsPanel.clear();\n}, style: {margin: ‘10px’} });\n// the main panel to select mode, year, croptype var panel = ui.Panel({ widgets: [\nui.Label('North Dakota Crop Yield', {\n  fontWeight: 'bold',\n  fontSize: '22px',\n  textAlign: 'center',\n  stretch: 'horizontal'\n  \n}),\n\nui.Label('Select Mode:'),\nui.Select({\n  items: ['Select...','County Level', 'Area Level'],\n  value: 'Select...',\n  onChange: function(mode) {\n    \n    // operate different \n    if (mode === 'County Level') {\n      // County Level\n      statsLabel_1.style().set('shown', true);\n      statsLabel_2.style().set('shown', false);\n      \n      // reset button\n      panel.remove(clearButton);\n      panel.add(clearButton);\n      \n      // ban polygon drawing selection\n      var drawingTools = Map.drawingTools();\n      drawingTools.setShown(false);\n      \n      //Function for getting value from image\n      var getCalculation = function(countyName, cropYieldLayer) {\n        var county = nd.filter(ee.Filter.eq('NAME', countyName)).first();\n        var countyGeometry = county.geometry();\n        \n         //print(selectedYear, selectedCrop);\n        var countyData=readCsvFile(selectedYear, selectedCrop);\n        // print(countyData);\n        countyData = processCountyColumn(countyData);\n        \n        resultsPanel.clear();\n      \n        var countStats = cropYieldLayer.reduceRegion({\n          reducer: ee.Reducer.count(),\n          geometry: countyGeometry,\n          scale: 30,\n          maxPixels: 1e9\n        });\n       //print(countStats);\n      \n        var selectedCounty = countyData.filter(ee.Filter.eq('County', countyName));\n        var averYield = selectedCounty.reduceColumns({\n        reducer: ee.Reducer.mean(),\n        selectors: ['Value']\n      });\n        //print(averYield);\n      \n        // create labels\n        var countyLabel = ui.Label({\n          value: 'County: ' + countyName,\n          style: {fontSize: '13px', padding: '0px 50px'}\n        });\n      \n        var count_sumLabel = ui.Label({\n          value: 'Calculating...',\n          style: {fontSize: '13px', padding: '0px 50px'}\n        });\n      \n      // update labels by calculating\n      // get the mean yield data\n        averYield.evaluate(function(result) {\n          var meanYield = result.mean;\n          var count_averYieldLabel = ui.Label({\n            value: 'Average Yield: ' + meanYield.toFixed(2) + ' BU/Acre', \n            style: {fontSize: '13px', padding: '0px 50px'}\n          });\n            resultsPanel.add(count_averYieldLabel);\n      });\n      \n        // calculate the area and total yield\n        countStats.get('YIELDpredicted').evaluate(function(value){\n\n          var areaInSqKm = (value / 1e6) * 900;\n          var areaInAcres = areaInSqKm * 247.105;\n          count_sumLabel.setValue('Crop Area: ' + areaInSqKm.toFixed(2) + \n                                  ' km² (' + areaInAcres.toFixed(2) + ' Acres)');\n                                  \n          averYield.evaluate(function(result) {\n            var meanYield = result.mean;\n            var totalYield = areaInAcres * meanYield;\n            var count_totalYieldLabel = ui.Label({\n              value: 'Total Yield: ' + totalYield.toFixed(2) + ' BU', \n              style: {fontSize: '13px', padding: '0px 50px'}\n            });\n            var yieldPrice = totalYield * cropPrice;\n            var yieldPriceLabel = ui.Label({\n              value: 'Total Yield Value: ' + yieldPrice.toFixed(2) + ' $', \n              style: {fontSize: '13px', padding: '0px 50px'}\n            });\n            resultsPanel.add(count_totalYieldLabel);\n            resultsPanel.add(yieldPriceLabel);\n      });\n        });\n      \n        // add the new label to sub-panel\n        resultsPanel.add(countyLabel);\n        resultsPanel.add(count_sumLabel);\n      };\n      \n      Map.unlisten()\n      \n        // create onclick function\n      Map.onClick(function(coords) {\n        \n      var point = ee.Geometry.Point(coords.lon, coords.lat);\n      var county = ee.Feature(nd.filterBounds(point).first());\n      var countyName = county.get('NAME');\n      countyName.evaluate(function(name) {\n        getCalculation(name, cropYieldLayer);\n      });\n      })\n      \n\n      // Area level\n    } else if (mode === 'Area Level') {\n\n      statsLabel_1.style().set('shown', false);\n      statsLabel_2.style().set('shown', true);\n      \n      // delet onclick monitor\n      Map.unlisten()\n      \n      //reset button\n      panel.remove(clearButton);\n      panel.add(clearButton);\n      \n      // draw polygon\n      var drawingTools = Map.drawingTools();\n      drawingTools.setShown(true);\n\n\n      // function under area level\n      function initializeAreaLevelMode() {\n        // create a new drawing tools\n        var drawingTools = Map.drawingTools();\n        drawingTools.setShown(true);\n        \n        drawingTools.onDraw(function(geometry) {\n          // get the polygon user drawing\n          var userPolygon = geometry;\n          \n          // calculate pixels number inside the polygon user draw\n          var pixelCount = cropYieldLayer.reduceRegion({\n            reducer: ee.Reducer.count(),\n            geometry: userPolygon,\n            scale: 30,\n            maxPixels: 1e9\n          });\n          \n          //calculate average yield user draw\n         var meanStats = cropYieldLayer.reduceRegion({\n          reducer: ee.Reducer.mean(),\n          geometry: userPolygon,\n          scale: 30,\n          maxPixels: 1e9\n        });\n          // print(meanStats)\n\n            // combined 2 results\n          var results = ee.Dictionary({\n              meanYield: meanStats.get('YIELDpredicted'),\n              pixelCount: pixelCount.get('YIELDpredicted')\n          });\n\n          // calculate average yield, crop area, total yield, and update labels\n          results.evaluate(function(values)  {\n            resultsPanel.clear();\n            \n          var area_sumLabel = ui.Label({\n            value: 'Calculating...',\n            style: {fontSize: '14px', padding: '0px 50px'}\n          });\n          \n          var meanYield_sumLabel = ui.Label({\n            value: 'Calculating...',\n            style:{fontSize: '14px', padding: '0px 50px'}\n          });\n          \n          var count_totalYieldLabel = ui.Label({\n            value: 'Calculating...',\n            style:{fontSize: '14px', padding: '0px 50px'}\n          });\n      \n          resultsPanel.add(area_sumLabel);\n          resultsPanel.add(meanYield_sumLabel);\n          resultsPanel.add(count_totalYieldLabel);\n      \n          meanYield_sumLabel.setValue('Average Yield: ' + values.meanYield.toFixed(2) + ' BU/Acre');\n      \n          var areaInSqKm = (values.pixelCount / 1e6) * 900;\n          var areaInAcres = areaInSqKm * 247.105;\n          area_sumLabel.setValue('Crop Area: ' + areaInSqKm.toFixed(2) + \n                                  ' km² (' + areaInAcres.toFixed(2) + ' Acres)');\n                                  \n          var totalYield = areaInAcres * values.meanYield;\n          count_totalYieldLabel.setValue('Total Yield: ' + totalYield.toFixed(2) + ' BU'); \n           \n          var yieldPrice = totalYield * cropPrice;\n          var yieldPriceLabel = ui.Label({\n              value: 'Total Yield Value: ' + yieldPrice.toFixed(2) + ' $', \n              style: {fontSize: '13px', padding: '0px 50px'}\n            });\n          resultsPanel.add(yieldPriceLabel);\n            \n            });\n            \n        });\n\n      }\n      initializeAreaLevelMode();\n      \n    }\n    \n  }\n}),\n\nui.Label('Select Year:'),\nui.Select({\n  items: ['Select...', '2018', '2019', '2020', \n             '2021', '2022', '2023', '2024'],\n  value: 'Select...',\n  onChange: function(year) {\n    \n    // update global variable selectedYear, the year user chose\n    selectedYear = year;\n    updateMap();\n\n  }\n}),\n\nui.Label('Select Crop:'),\nui.Select({\n  items: ['Select...', 'Soybean', 'Corn', 'Wheat'],\n  value: 'Select...',\n  onChange: function(crop) {\n    \n    selectedCrop = crop;\n    \n    // set cropPrice according to selected \n    if (selectedCrop === 'Soybean') {\n      cropPrice = 11.90; \n    } else if (selectedCrop === 'Wheat') {\n      cropPrice = 6.07; \n    } else if (selectedCrop === 'Corn') {\n      cropPrice = 5.80; \n    } else {\n      cropPrice = 0;\n    }\n    \n    updateMap();\n    \n  }\n}),\n\nstatsLabel_1,\nstatsLabel_2\n], style: {position: ‘top-right’} });\nMap.add(panel);\n// Add a sub-panel to show calculation info var resultsPanel = ui.Panel({ layout: ui.Panel.Layout.Flow(‘vertical’), style: {width: ‘310px’} }); panel.add(resultsPanel);\n// update new layers accoording to user’s selection function updateMap() {\n// // Remove particular layers // Map.layers().forEach(function(layer) { // var layerName = layer.getName(); // if (layerName.indexOf(‘YIELD_’) === 0) { // Map.remove(layer); // } // });\nMap.layers().reset();\n// Show layers if user choose both selections if (selectedYear !== ‘Select…’ && selectedCrop !== ‘Select…’) {\n  cropYieldLayer = cropLayers[selectedCrop][selectedYear];\n\nif (cropYieldLayer) {\n  var layerName = selectedCrop + '_' + selectedYear;\n  Map.addLayer(cropYieldLayer, {}, 'YIELD_' + layerName);\n}\n}\n// add the counties layer Map.addLayer(ndCounties, {}, ‘ND Counties’);\n}\n```:\n\n\nInterface Code:"
  }
]