{"title":"CROPINVEST","markdown":{"yaml":{"title":"CROPINVEST","jupyter":{"jupytext":{"text_representation":{"extension":".qmd","format_name":"quarto","format_version":"1.0","jupytext_version":"1.15.2"}},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"}}},"headingText":"Project Summary","containsRefs":false,"markdown":"\n\n![](Captnknure.JPG)\n\n\nCROPINVEST - Crop Yield Estimator for the State of North Dakota, USA\n\n### Problem Statement \n\nWhat is the problem you’re trying to address using this application? \n\n### End User \n\nWho are you building this application for? How does it address a need this community has?\n\n### Data\n\nDatasets that we have used & the relevant data from the dataset which we have used are described below in detail:-\n\n1. **United States Census Bureau TIGER Dataset**\n   It contains the boundary information i.e. counties of states which are the primary legal divisions units of US states.\n    - *Dataset:* ee.ImageCollection(\"TIGER/2016/Counties\")\n    - *Dataset Provider:* United States Census Bureau\n    - *Data Used for our Study:* `STATEFP` parameter of the dataset which provides the State FIPS code & the North Dakota value is used.\n<br><br>     \n2. **USDA NASS Cropland Data Layers**\n   It is a crop-specific land cover data layer created annually for the continental United States using moderate resolution satellite imagery and extensive agricultural ground truth.\n    - *Dataset:* ee.FeatureCollection(\"USDA/NASS/CDL\")\n    - *Dataset Provider:* USDA National Agricultural Statistics Service\n    - *Data Used for our Study:* `cropland` values for different crops of our study are used Wheat, Corn & Soybean Values provided from the Cropland Table.\n<br><br>     \n3. **MOD13Q1.061 Terra Vegetation Indices 16-Day Global**\n   It provides Normalized Difference Vegetation Index (NDVI) value on a per pixel basis. \n    - *Dataset:* ee.ImageCollection(\"MODIS/061/MOD13Q1\")\n    - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n    - *Data Used for our Study:* `NDVI` parameter of the dataset which provides the Normalized Difference Vegetation Index.\n<br><br>     \n4. **GRIDMET:Gridded Surface Meteorological Dataset**\n   It provides the high spatial resolution (~4-km) daily surface fields of temperature, precipitation, winds, humidity and radiation across the contiguous United States from 1979. \n    - *Dataset:* ee.ImageCollection(\"IDAHO_EPSCOR/GRIDMET\")\n    - *Dataset Provider:* USDA National Agricultural Statistics Service\n    - *Data Used for our Study:* `pr` parameter of the dataset which provides the 'Precipitation amount' in mm (daily total)\n<br><br>      \n5. **Sentinel-1 SAR GRD**\n   It contains the boundary information i.e. counties of states which are the primary legal divisions units of US states.\n    - *Dataset:* ee.ImageCollection(\"COPERNICUS/S1_GRD\")\n    - *Dataset Provider:* European Union/ESA/Copernicus\n    - *Data Used for our Study:* `VV` parameter of the dataset which provides 'Single co-polarization, vertical transmit/vertical receive' in dB.\n<br><br> \n6. **SPL3SMP_E.005 SMAP L3 Radiometer Global Daily 9km Soil Moisture**\n   It provides a daily composite of global land surface conditions retrieved by the Soil Moisture Active Passive (SMAP) L-Band radiometer. The daily data here were collected from the descending (local solar time of 6 am) and ascending (local solar time of 6 pm) passes.\n    - *Dataset:* ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\n    - *Dataset Provider:* Google and NSIDC\n    - *Data Used for our Study:* `soil_moisture_am` & `soil_moisture_pm`parameter of the dataset which provides 'Retrieved soil moisture estimate from the disaggregated/downscaled vertical polarization brightness temperature at 9-km grid cell one at AM overpass & other at  PM overpass.in dB.\n<br><br>\n7. **MOD11A1.061 Terra Land Surface Temperature**\n   MOD11A1 V6.1 product provides daily land surface temperature (LST) along with other parameters.\n    - *Dataset:* ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\n    - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n    - *Data Used for our Study:* `LST_Day_1km` & `LST_Night_1km`parameter of the dataset which provides 'Daytime Land Surface Temperature' & Daytime Land Surface Temperature' both in Kelvin (K).\n<br><br>\n8. **MCD18C2.061 Photosynthetically Active Radiation Daily 3 hour**\n   The MCD18C2 Version 6.1 is a Moderate Resolution Imaging Spectroradiometer (MODIS) Terra and Aqua combined Photosynthetically Active Radiation (PAR) gridded Level 3 product produced daily at 0.05 degree (5,600 meters at the equator) resolution with estimates of PAR every 3 hours. \n    - *Dataset:* ee.ImageCollection(\"MODIS/061/MCD18C2\")\n    - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n    - *Data Used for our Study:* `GMT_1200_PAR` parameter of the dataset which provides 'Total PAR at GMT 12:00'.PAR is incident solar radiation in the visible spectrum (400-700 nanometers) and is an important variable in land-surface models having use in agriculture & other scientific applications.\n<br><br>\n9. **MOD16A2GF.061: Terra Net Evapotranspiration**\n   It includes inputs of daily meteorological reanalysis data along with MODIS remotely sensed data products such as vegetation property dynamics, albedo, and land cover.\nThe pixel values for the two Evapotranspiration layers (ET and PET) are the sum of all eight days within the composite period, and the pixel values for the two Latent Heat layers (LE and PLE) are the average of all eight days within the composite peri.\n   - *Dataset:* ee.ImageCollection(\"MODIS/061/MOD16A2GF\")\n   - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n   - *Data Used for our Study:* `ET` parameter of the dataset which provides 'Total evapotranspiration' in kg/m^2/8day.s.\n<br><br>\n\n### Methodology\n\nHow are you using this data to address the problem?\n\n#### **Building Random Forest Model:**\n\n1. **Prepare original CSV including the three types of crop among several X variables and Y variable (the crop yield)**\n    - *CSV Img!*\n<br><br>     \n2. **Prepare training/validation data**\n    - Add a random attribute to the data set with a random number.\n    - Split 80% of data for training and 20% of that for testing.       \n<br><br> \n3. **Use the training data to train three different RF Models in GEE**\n    - ee.Classifier.smileRandomForest(100, null, 1, 0.5, null, 0).setOutputMode('REGRESSION')\n    - Notice ‘setOutputMode’ is set to ‘REGRESSION’. This command is the most important for running Random Forest regression models in GEE\n<br><br> \n#### **Validation**\n    - X variables\n    - Importances\n    - R2\n    - RMSE\n\n### Interface\n\nHere is a presentation to show, how our application work:\n\n<div style=\"position: relative; width: 110%; height:600px; padding-top: 56.2500%;\n padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 1.6em; margin-bottom: 0.9em; overflow: hidden;\n border-radius: 8px; will-change: transform;\">\n  <iframe loading=\"lazy\" style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0;margin: 0;\"\n    src=\"https:&#x2F;&#x2F;www.canva.com&#x2F;design&#x2F;DAGCq_eFmq8&#x2F;Muz__V20V7SJUNr3EVBSEQ&#x2F;view?embed\" allowfullscreen=\"allowfullscreen\" allow=\"fullscreen\">\n  </iframe>\n</div>\n\n## The Application \n\n:::{.column-page}\n\n<iframe src='https://songzimeng.users.earthengine.app/view/north-dakota-crop-yield' width='100%' height='700px'></iframe>\n\n:::\n\n## How it Works \n\n### Data Extraction Code:\n- Here we use the Python environment to extract the data from different datasets using Google Earth Engine API\n- Afterwards, we first use the crop-specific land cover data to distinguish different crops- wheat, soybean or corn for each county in North Dakota.\n- Further, NDVI, Precipitation, SAR, Soil Moisture & other values are used to get the county-wise values from the year 2000-2024.\n- Afterwards, the Yield data is obtained from the [United States Department of Agriculture](https://quickstats.nass.usda.gov/) for each of the years and a final dataset is obtained which has all the X Variables (GEOID,NDVI,PA,SAR,SMS_AM,LST_DAY,SMS_PM,LST_NIGHT,PAR,ET) & Y variable (YIELD).\n\n```python\n# Commented the line below as I have installed the gee api already\n#pip install earthengine-api\nimport ee\nee.Authenticate()\nee.Initialize()\ndef processYear(year):\n    # Load the CDL dataset for the given year\n    dataset = ee.ImageCollection('USDA/NASS/CDL')\\\n                .filter(ee.Filter.date(f'{year}-01-01', f'{year}-12-31'))\\\n                .first()\n    crop_landcover = dataset.select('cropland')\n\n    # Filter for North Dakota counties\n    #`STATEFP` parameter of the dataset which provides the State FIPS code & the North Dakota value is used.\n    counties = ee.FeatureCollection('TIGER/2016/Counties')\n    nd = counties.filter(ee.Filter.eq('STATEFP', '38'))\n\n    # Identify corn areas in North Dakota\n    #`cropland` values for different crops of our study are used Wheat, Corn & Soybean Values provided from the Cropland Table.\n    corn = crop_landcover.eq(1).Or(crop_landcover.eq(12)).Or(crop_landcover.eq(13))\n    masked_corn = crop_landcover.updateMask(corn).clipToCollection(nd)\n\n    # Calculate NDVI for corn areas using MODIS data\n    #`NDVI` parameter of the dataset and we obtain the mean over the growth period of the crop\n    NDVI_dataset = ee.ImageCollection('MODIS/061/MOD13Q1')\\\n                    .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n    ndvi = NDVI_dataset.select('NDVI')\n    mean_ndvi = ndvi.mean().rename('NDVI')\n    cornNDVI = mean_ndvi.updateMask(masked_corn)\n\n    # Calculate precipitation using GRIDMET data\n    #`pr` parameter of the dataset which provides the 'Precipitation amount' in mm (daily total)\n    precipitation_dataset = ee.ImageCollection(\"IDAHO_EPSCOR/GRIDMET\")\\\n                             .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                             .select('pr')\n    mean_precipitation = precipitation_dataset.mean().rename('PA')\n\n    # Load Sentinel-1 C-band SAR Image Collection for the given year, select VV polarization\n    #`VV` parameter of the dataset which provides 'Single co-polarization, vertical transmit/vertical receive' in dB.\n    s1_dataset = ee.ImageCollection(\"COPERNICUS/S1_GRD\")\\\n                   .filter(ee.Filter.eq('instrumentMode', 'IW'))\\\n                   .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\\\n                   .filter(ee.Filter.date(f'{year}-01-01', f'{year}-12-31'))\\\n                   .select('VV')\n    mean_s1_vv = s1_dataset.mean().rename('SAR')\n\n    # Load Radiometer Global Daily 9 km Soil Moisture AM\n    #`soil_moisture_am` & `soil_moisture_pm` parameter of the dataset which provides 'Retrieved soil moisture estimate from the\n    # disaggregated/downscaled vertical polarization brightness temperature at 9-km grid cell one at AM overpass & other at  PM overpass. in dB.\n    smap_dataset = ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\\\n                    .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                    .select('soil_moisture_am')\n    mean_soil_moisture = smap_dataset.mean().rename('SMS_AM')\n    # Load Radiometer Global Daily 9 km Soil Moisture PM\n    smapDataset_pm = ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\\\n                       .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                       .select('soil_moisture_am')\n    meanSoilMoisture_pm = smapDataset_pm.mean().rename('SMS_PM')\n\n    # Load MODIS Land Surface Temperature DAY\n    #`LST_Day_1km` & `LST_Night_1km` parameter of the dataset which provides 'Daytime Land Surface Temperature' &\n    # Nighttime Land Surface Temperature' both in Kelvin (K).\n    lstDataset = ee.ImageCollection(\"MODIS/061/MOD11A1\")\\\n                   .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n    lstmean_celsius = lstDataset.select('LST_Day_1km')\\\n                                .mean()\\\n                                .multiply(0.02)\\\n                                .subtract(273.15)\\\n                                .rename('LST_DAY')\n\n    # Load MODIS Land Surface Temperature NIGHT\n    lstDataset_night = ee.ImageCollection(\"MODIS/061/MOD11A1\")\\\n                         .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n    lstmean_celsius_night = lstDataset_night.select('LST_Night_1km')\\\n                                              .mean()\\\n                                              .multiply(0.02)\\\n                                              .subtract(273.15)\\\n                                              .rename('LST_NIGHT')\n\n    # Photosynthetically Active Radiation Daily 3-Hour\n    #`GMT_1200_PAR` parameter of the dataset which provides 'Total PAR at GMT 12:00'. PAR is incident solar radiation in\n    # the visible spectrum (400-700 nanometers) and is an important variable in land-surface models having use in agriculture &\n    # other scientific applications.\n    par_12 = ee.ImageCollection(\"MODIS/061/MCD18C2\")\\\n               .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n               .select('GMT_1200_PAR')\n    mean_par_12 = par_12.mean().rename('PAR'); # Calculate the Photosynthetically Active Radiation at 12 PM\n\n    # Net Evapotranspiration\n    # `ET` parameter of the dataset which provides 'Total evapotranspiration' in kg/m^2/8day.s.\n    netevapo = ee.ImageCollection(\"MODIS/061/MOD16A2GF\")\\\n                 .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                 .select('ET')\n\n    mean_netevapo = netevapo.mean().rename('ET')  # Calculate the mean Soil Moisture\n\n    # Combine all layers\n    combinedDataset = cornNDVI.addBands(mean_precipitation).addBands(mean_s1_vv).addBands(mean_soil_moisture).addBands(lstmean_celsius).addBands(meanSoilMoisture_pm).addBands(lstmean_celsius_night).addBands(mean_par_12).addBands(mean_netevapo)\n\n    # Reduce regions and calculate mean values over the specified areas\n    combined_mean = combinedDataset.reduceRegions(\n     collection=nd,\n     reducer=ee.Reducer.mean(),\n     scale=30,\n     tileScale=4,\n     )\n\n     # Define export parameters\n    export_params = {\n        'collection': combined_mean,\n        'description': f'combined_{year}',\n        'folder': 'GEE_Folder',\n        'fileNamePrefix': f'Combined_{year}',\n        'fileFormat': 'CSV',\n        'selectors': ['NAME', 'GEOID', 'NDVI', 'PA', 'SAR', 'SMS_AM', 'LST_DAY', 'SMS_PM', 'LST_NIGHT', 'PAR', 'ET']\n    }\n\n    # Commented the line below as I have got the data in my drive already\n    #ee.batch.Export.table.toDrive(**export_params).start()\n\n    # Example of processing each year\n    for year in range(2000, 2024):\n        processYear(year)\n\n### Methodology Code:\n\n### Interface Code:\n\n","srcMarkdownNoYaml":"\n\n![](Captnknure.JPG)\n\n## Project Summary \n\nCROPINVEST - Crop Yield Estimator for the State of North Dakota, USA\n\n### Problem Statement \n\nWhat is the problem you’re trying to address using this application? \n\n### End User \n\nWho are you building this application for? How does it address a need this community has?\n\n### Data\n\nDatasets that we have used & the relevant data from the dataset which we have used are described below in detail:-\n\n1. **United States Census Bureau TIGER Dataset**\n   It contains the boundary information i.e. counties of states which are the primary legal divisions units of US states.\n    - *Dataset:* ee.ImageCollection(\"TIGER/2016/Counties\")\n    - *Dataset Provider:* United States Census Bureau\n    - *Data Used for our Study:* `STATEFP` parameter of the dataset which provides the State FIPS code & the North Dakota value is used.\n<br><br>     \n2. **USDA NASS Cropland Data Layers**\n   It is a crop-specific land cover data layer created annually for the continental United States using moderate resolution satellite imagery and extensive agricultural ground truth.\n    - *Dataset:* ee.FeatureCollection(\"USDA/NASS/CDL\")\n    - *Dataset Provider:* USDA National Agricultural Statistics Service\n    - *Data Used for our Study:* `cropland` values for different crops of our study are used Wheat, Corn & Soybean Values provided from the Cropland Table.\n<br><br>     \n3. **MOD13Q1.061 Terra Vegetation Indices 16-Day Global**\n   It provides Normalized Difference Vegetation Index (NDVI) value on a per pixel basis. \n    - *Dataset:* ee.ImageCollection(\"MODIS/061/MOD13Q1\")\n    - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n    - *Data Used for our Study:* `NDVI` parameter of the dataset which provides the Normalized Difference Vegetation Index.\n<br><br>     \n4. **GRIDMET:Gridded Surface Meteorological Dataset**\n   It provides the high spatial resolution (~4-km) daily surface fields of temperature, precipitation, winds, humidity and radiation across the contiguous United States from 1979. \n    - *Dataset:* ee.ImageCollection(\"IDAHO_EPSCOR/GRIDMET\")\n    - *Dataset Provider:* USDA National Agricultural Statistics Service\n    - *Data Used for our Study:* `pr` parameter of the dataset which provides the 'Precipitation amount' in mm (daily total)\n<br><br>      \n5. **Sentinel-1 SAR GRD**\n   It contains the boundary information i.e. counties of states which are the primary legal divisions units of US states.\n    - *Dataset:* ee.ImageCollection(\"COPERNICUS/S1_GRD\")\n    - *Dataset Provider:* European Union/ESA/Copernicus\n    - *Data Used for our Study:* `VV` parameter of the dataset which provides 'Single co-polarization, vertical transmit/vertical receive' in dB.\n<br><br> \n6. **SPL3SMP_E.005 SMAP L3 Radiometer Global Daily 9km Soil Moisture**\n   It provides a daily composite of global land surface conditions retrieved by the Soil Moisture Active Passive (SMAP) L-Band radiometer. The daily data here were collected from the descending (local solar time of 6 am) and ascending (local solar time of 6 pm) passes.\n    - *Dataset:* ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\n    - *Dataset Provider:* Google and NSIDC\n    - *Data Used for our Study:* `soil_moisture_am` & `soil_moisture_pm`parameter of the dataset which provides 'Retrieved soil moisture estimate from the disaggregated/downscaled vertical polarization brightness temperature at 9-km grid cell one at AM overpass & other at  PM overpass.in dB.\n<br><br>\n7. **MOD11A1.061 Terra Land Surface Temperature**\n   MOD11A1 V6.1 product provides daily land surface temperature (LST) along with other parameters.\n    - *Dataset:* ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\n    - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n    - *Data Used for our Study:* `LST_Day_1km` & `LST_Night_1km`parameter of the dataset which provides 'Daytime Land Surface Temperature' & Daytime Land Surface Temperature' both in Kelvin (K).\n<br><br>\n8. **MCD18C2.061 Photosynthetically Active Radiation Daily 3 hour**\n   The MCD18C2 Version 6.1 is a Moderate Resolution Imaging Spectroradiometer (MODIS) Terra and Aqua combined Photosynthetically Active Radiation (PAR) gridded Level 3 product produced daily at 0.05 degree (5,600 meters at the equator) resolution with estimates of PAR every 3 hours. \n    - *Dataset:* ee.ImageCollection(\"MODIS/061/MCD18C2\")\n    - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n    - *Data Used for our Study:* `GMT_1200_PAR` parameter of the dataset which provides 'Total PAR at GMT 12:00'.PAR is incident solar radiation in the visible spectrum (400-700 nanometers) and is an important variable in land-surface models having use in agriculture & other scientific applications.\n<br><br>\n9. **MOD16A2GF.061: Terra Net Evapotranspiration**\n   It includes inputs of daily meteorological reanalysis data along with MODIS remotely sensed data products such as vegetation property dynamics, albedo, and land cover.\nThe pixel values for the two Evapotranspiration layers (ET and PET) are the sum of all eight days within the composite period, and the pixel values for the two Latent Heat layers (LE and PLE) are the average of all eight days within the composite peri.\n   - *Dataset:* ee.ImageCollection(\"MODIS/061/MOD16A2GF\")\n   - *Dataset Provider:* NASA LP DAAC at the USGS EROS Center\n   - *Data Used for our Study:* `ET` parameter of the dataset which provides 'Total evapotranspiration' in kg/m^2/8day.s.\n<br><br>\n\n### Methodology\n\nHow are you using this data to address the problem?\n\n#### **Building Random Forest Model:**\n\n1. **Prepare original CSV including the three types of crop among several X variables and Y variable (the crop yield)**\n    - *CSV Img!*\n<br><br>     \n2. **Prepare training/validation data**\n    - Add a random attribute to the data set with a random number.\n    - Split 80% of data for training and 20% of that for testing.       \n<br><br> \n3. **Use the training data to train three different RF Models in GEE**\n    - ee.Classifier.smileRandomForest(100, null, 1, 0.5, null, 0).setOutputMode('REGRESSION')\n    - Notice ‘setOutputMode’ is set to ‘REGRESSION’. This command is the most important for running Random Forest regression models in GEE\n<br><br> \n#### **Validation**\n    - X variables\n    - Importances\n    - R2\n    - RMSE\n\n### Interface\n\nHere is a presentation to show, how our application work:\n\n<div style=\"position: relative; width: 110%; height:600px; padding-top: 56.2500%;\n padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 1.6em; margin-bottom: 0.9em; overflow: hidden;\n border-radius: 8px; will-change: transform;\">\n  <iframe loading=\"lazy\" style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0;margin: 0;\"\n    src=\"https:&#x2F;&#x2F;www.canva.com&#x2F;design&#x2F;DAGCq_eFmq8&#x2F;Muz__V20V7SJUNr3EVBSEQ&#x2F;view?embed\" allowfullscreen=\"allowfullscreen\" allow=\"fullscreen\">\n  </iframe>\n</div>\n\n## The Application \n\n:::{.column-page}\n\n<iframe src='https://songzimeng.users.earthengine.app/view/north-dakota-crop-yield' width='100%' height='700px'></iframe>\n\n:::\n\n## How it Works \n\n### Data Extraction Code:\n- Here we use the Python environment to extract the data from different datasets using Google Earth Engine API\n- Afterwards, we first use the crop-specific land cover data to distinguish different crops- wheat, soybean or corn for each county in North Dakota.\n- Further, NDVI, Precipitation, SAR, Soil Moisture & other values are used to get the county-wise values from the year 2000-2024.\n- Afterwards, the Yield data is obtained from the [United States Department of Agriculture](https://quickstats.nass.usda.gov/) for each of the years and a final dataset is obtained which has all the X Variables (GEOID,NDVI,PA,SAR,SMS_AM,LST_DAY,SMS_PM,LST_NIGHT,PAR,ET) & Y variable (YIELD).\n\n```python\n# Commented the line below as I have installed the gee api already\n#pip install earthengine-api\nimport ee\nee.Authenticate()\nee.Initialize()\ndef processYear(year):\n    # Load the CDL dataset for the given year\n    dataset = ee.ImageCollection('USDA/NASS/CDL')\\\n                .filter(ee.Filter.date(f'{year}-01-01', f'{year}-12-31'))\\\n                .first()\n    crop_landcover = dataset.select('cropland')\n\n    # Filter for North Dakota counties\n    #`STATEFP` parameter of the dataset which provides the State FIPS code & the North Dakota value is used.\n    counties = ee.FeatureCollection('TIGER/2016/Counties')\n    nd = counties.filter(ee.Filter.eq('STATEFP', '38'))\n\n    # Identify corn areas in North Dakota\n    #`cropland` values for different crops of our study are used Wheat, Corn & Soybean Values provided from the Cropland Table.\n    corn = crop_landcover.eq(1).Or(crop_landcover.eq(12)).Or(crop_landcover.eq(13))\n    masked_corn = crop_landcover.updateMask(corn).clipToCollection(nd)\n\n    # Calculate NDVI for corn areas using MODIS data\n    #`NDVI` parameter of the dataset and we obtain the mean over the growth period of the crop\n    NDVI_dataset = ee.ImageCollection('MODIS/061/MOD13Q1')\\\n                    .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n    ndvi = NDVI_dataset.select('NDVI')\n    mean_ndvi = ndvi.mean().rename('NDVI')\n    cornNDVI = mean_ndvi.updateMask(masked_corn)\n\n    # Calculate precipitation using GRIDMET data\n    #`pr` parameter of the dataset which provides the 'Precipitation amount' in mm (daily total)\n    precipitation_dataset = ee.ImageCollection(\"IDAHO_EPSCOR/GRIDMET\")\\\n                             .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                             .select('pr')\n    mean_precipitation = precipitation_dataset.mean().rename('PA')\n\n    # Load Sentinel-1 C-band SAR Image Collection for the given year, select VV polarization\n    #`VV` parameter of the dataset which provides 'Single co-polarization, vertical transmit/vertical receive' in dB.\n    s1_dataset = ee.ImageCollection(\"COPERNICUS/S1_GRD\")\\\n                   .filter(ee.Filter.eq('instrumentMode', 'IW'))\\\n                   .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\\\n                   .filter(ee.Filter.date(f'{year}-01-01', f'{year}-12-31'))\\\n                   .select('VV')\n    mean_s1_vv = s1_dataset.mean().rename('SAR')\n\n    # Load Radiometer Global Daily 9 km Soil Moisture AM\n    #`soil_moisture_am` & `soil_moisture_pm` parameter of the dataset which provides 'Retrieved soil moisture estimate from the\n    # disaggregated/downscaled vertical polarization brightness temperature at 9-km grid cell one at AM overpass & other at  PM overpass. in dB.\n    smap_dataset = ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\\\n                    .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                    .select('soil_moisture_am')\n    mean_soil_moisture = smap_dataset.mean().rename('SMS_AM')\n    # Load Radiometer Global Daily 9 km Soil Moisture PM\n    smapDataset_pm = ee.ImageCollection(\"NASA/SMAP/SPL3SMP_E/005\")\\\n                       .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                       .select('soil_moisture_am')\n    meanSoilMoisture_pm = smapDataset_pm.mean().rename('SMS_PM')\n\n    # Load MODIS Land Surface Temperature DAY\n    #`LST_Day_1km` & `LST_Night_1km` parameter of the dataset which provides 'Daytime Land Surface Temperature' &\n    # Nighttime Land Surface Temperature' both in Kelvin (K).\n    lstDataset = ee.ImageCollection(\"MODIS/061/MOD11A1\")\\\n                   .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n    lstmean_celsius = lstDataset.select('LST_Day_1km')\\\n                                .mean()\\\n                                .multiply(0.02)\\\n                                .subtract(273.15)\\\n                                .rename('LST_DAY')\n\n    # Load MODIS Land Surface Temperature NIGHT\n    lstDataset_night = ee.ImageCollection(\"MODIS/061/MOD11A1\")\\\n                         .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\n    lstmean_celsius_night = lstDataset_night.select('LST_Night_1km')\\\n                                              .mean()\\\n                                              .multiply(0.02)\\\n                                              .subtract(273.15)\\\n                                              .rename('LST_NIGHT')\n\n    # Photosynthetically Active Radiation Daily 3-Hour\n    #`GMT_1200_PAR` parameter of the dataset which provides 'Total PAR at GMT 12:00'. PAR is incident solar radiation in\n    # the visible spectrum (400-700 nanometers) and is an important variable in land-surface models having use in agriculture &\n    # other scientific applications.\n    par_12 = ee.ImageCollection(\"MODIS/061/MCD18C2\")\\\n               .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n               .select('GMT_1200_PAR')\n    mean_par_12 = par_12.mean().rename('PAR'); # Calculate the Photosynthetically Active Radiation at 12 PM\n\n    # Net Evapotranspiration\n    # `ET` parameter of the dataset which provides 'Total evapotranspiration' in kg/m^2/8day.s.\n    netevapo = ee.ImageCollection(\"MODIS/061/MOD16A2GF\")\\\n                 .filter(ee.Filter.date(f'{year}-05-01', f'{year}-10-01'))\\\n                 .select('ET')\n\n    mean_netevapo = netevapo.mean().rename('ET')  # Calculate the mean Soil Moisture\n\n    # Combine all layers\n    combinedDataset = cornNDVI.addBands(mean_precipitation).addBands(mean_s1_vv).addBands(mean_soil_moisture).addBands(lstmean_celsius).addBands(meanSoilMoisture_pm).addBands(lstmean_celsius_night).addBands(mean_par_12).addBands(mean_netevapo)\n\n    # Reduce regions and calculate mean values over the specified areas\n    combined_mean = combinedDataset.reduceRegions(\n     collection=nd,\n     reducer=ee.Reducer.mean(),\n     scale=30,\n     tileScale=4,\n     )\n\n     # Define export parameters\n    export_params = {\n        'collection': combined_mean,\n        'description': f'combined_{year}',\n        'folder': 'GEE_Folder',\n        'fileNamePrefix': f'Combined_{year}',\n        'fileFormat': 'CSV',\n        'selectors': ['NAME', 'GEOID', 'NDVI', 'PA', 'SAR', 'SMS_AM', 'LST_DAY', 'SMS_PM', 'LST_NIGHT', 'PAR', 'ET']\n    }\n\n    # Commented the line below as I have got the data in my drive already\n    #ee.batch.Export.table.toDrive(**export_params).start()\n\n    # Example of processing each year\n    for year in range(2000, 2024):\n        processYear(year)\n\n### Methodology Code:\n\n### Interface Code:\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"monokai.theme","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","book":{"title":"CASA0025 Final Assessment","author":"Group Name","date":"01/01/2024","chapters":["index.qmd"],"repo-actions":["edit"],"downloads":["pdf","epub"],"sharing":["twitter","facebook"],"favicon":"favicon.ico","sidebar":{"logo":"casa_logo.png"}},"theme":{"dark":"darkly","light":"cosmo"},"code-copy":true,"linkcolor":"#34a832","title":"CROPINVEST","jupyter":{"jupytext":{"text_representation":{"extension":".qmd","format_name":"quarto","format_version":"1.0","jupytext_version":"1.15.2"}},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}